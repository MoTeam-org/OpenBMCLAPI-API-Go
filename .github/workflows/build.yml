name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            output: openbmclapi-linux
          - os: windows-latest
            output: openbmclapi-windows.exe

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    # 从 commit message 提取版本号
    - name: Get version from commit message
      id: get_version
      run: |
        message=$(git log -1 --pretty=%B)
        if [[ $message =~ Build:V[0-9]+\.[0-9]+\.[0-9]+(_?)$ ]]; then
          echo "version=${BASH_REMATCH[0]}" >> $GITHUB_OUTPUT
        else
          echo "version=Build:V0.0.0" >> $GITHUB_OUTPUT
        fi
      shell: bash

    # 设置 Node.js 环境
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 设置 Go 环境
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    # 安装前端依赖
    - name: Install Frontend Dependencies
      run: |
        cd web
        npm install
        npm run build
        cd ..

    # 构建 Go 程序
    - name: Build Go Binary
      run: |
        go mod tidy
        go build -v -o ${{ matrix.output }}

    # 上传构建产物
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.output }}
        path: ${{ matrix.output }}

    # 创建 Release
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.output }}
        tag_name: ${{ steps.get_version.outputs.version }}
        name: ${{ steps.get_version.outputs.version }}${{ endsWith(steps.get_version.outputs.version, '_') && ' (测试版)' || '' }}
        draft: false
        prerelease: ${{ endsWith(steps.get_version.outputs.version, '_') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 