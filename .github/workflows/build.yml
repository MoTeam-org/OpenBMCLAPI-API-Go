name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的 git 历史用于版本号提取

    # 设置 Node.js 环境
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 设置 Go 环境
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    # 从 commit message 提取版本号
    - name: Get version from commit message
      id: get_version
      run: |
        message=$(git log -1 --pretty=%B)
        if [[ $message =~ Build:V([0-9]+\.[0-9]+\.[0-9]+)(_?)$ ]]; then
          version="${BASH_REMATCH[1]}"
          is_test="${BASH_REMATCH[2]}"
          if [ "$is_test" == "_" ]; then
            tag="v${version}-beta"
            release_name="v${version} Beta"
          else
            tag="v${version}"
            release_name="v${version}"
          fi
        else
          tag="v0.0.1"
          release_name="v0.0.1"
        fi
        echo "VERSION=${version}" >> $GITHUB_ENV
        echo "TAG=${tag}" >> $GITHUB_ENV
        echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "tag=${tag}" >> $GITHUB_OUTPUT

    # 安装前端依赖并构建
    - name: Build Frontend
      run: |
        cd web
        npm install
        npm run build
        cd ..

    # 构建 Go 程序
    - name: Build Go Binary
      run: |
        go mod tidy
        GOOS=windows GOARCH=amd64 go build -v -o OBA-BD-${{ env.TAG }}.exe
        GOOS=linux GOARCH=amd64 go build -v -o OBA-BD-${{ env.TAG }}-linux

    # 创建 Release
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          OBA-BD-${{ env.TAG }}.exe
          OBA-BD-${{ env.TAG }}-linux
        tag_name: ${{ env.TAG }}
        name: Release ${{ env.RELEASE_NAME }}
        draft: false
        prerelease: ${{ contains(env.TAG, '-beta') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 